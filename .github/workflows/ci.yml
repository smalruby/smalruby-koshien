name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bundle exec standardrb

  test:
    runs-on: ubuntu-latest

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests with coverage
        env:
          RAILS_ENV: test
          # REDIS_URL: redis://localhost:6379/0
        run: |
          bin/rails db:test:prepare
          bundle exec rspec --format progress

      - name: Upload coverage reports to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/

      - name: Generate coverage summary
        id: coverage
        run: |
          # Extract coverage percentage from SimpleCov JSON report
          COVERAGE=$(ruby -r json -e "
            if File.exist?('coverage/coverage.json')
              data = JSON.parse(File.read('coverage/coverage.json'))
              puts data['metrics']['covered_percent'].round(2)
            else
              puts '0'
            end
          " 2>/dev/null || echo "0")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Comment coverage on PR
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.percentage }}';
            const coverageFloat = parseFloat(coverage);
            const coverageEmoji = coverageFloat >= 80 ? '✅' : coverageFloat >= 70 ? '⚠️' : '❌';

            const comment = `## 📊 Code Coverage Report

            ${coverageEmoji} **Coverage: ${coverageFloat.toFixed(2)}%**

            Coverage threshold:
            - ✅ Good: ≥80%
            - ⚠️ Acceptable: ≥70%
            - ❌ Needs improvement: <70%

            📈 [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
